@page "/contacts/updateContactForm"

@using Notebook.Domain.Requests
@using Notebook.Domain.Responses
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudStack Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="_isValid" Model="@_updateContactRequest" @bind-Errors="@_errors" Class="@(_updateIsSuccesed ? "green-border" : "")">

                <MudTextField Label="Contact Id" @bind-Value="_updateContactRequest.Id" For="@(() => _updateContactRequest.Id)"
                Required="true" RequiredError="Contact Id is required!"
                Class="@(_existingId ? "green-border" : "")"/>

                <style>.green-border{border: 2px solid green}</style>

                <MudTextField Label="First Name" @bind-Value="_updateContactRequest.FirstName" For="@(() => _updateContactRequest.FirstName)"
                Required="true" RequiredError="First name is required!" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(FirstNameVerification))" />

                <MudTextField Label="Last Name" @bind-Value="_updateContactRequest.LastName" For="@(() => _updateContactRequest.LastName)"
                Required="true" RequiredError="Last name is required!" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(LastNameVerification))" />

                <MudTextField Label="Phone number" @bind-Value="_updateContactRequest.PhoneNumber" For="@(() => _updateContactRequest.PhoneNumber)"
                Required="true" RequiredError="Phone number is required!" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(PhoneNumberVerification))"
                OnBlur="@(async () => await PhoneNumberDuplicateVerification(_updateContactRequest.PhoneNumber))" />

                <MudTextField Label="Email" @bind-Value="_updateContactRequest.Email" For="@(() => _updateContactRequest.Email)"
                Required="false" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(EmailVerification))" />

                <MudDatePicker Label="Date of Birth" Disabled="!_existingId" @bind-Date="_updateContactRequest.DateOfBirth" PickerVariant="PickerVariant.Dialog" />

            </MudForm>

        </MudPaper>

        <MudPaper Class="pa-4 mt-4">
            <div style="display:flex; justify-content: space-between;"> 
                <MudButton Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => CheckContactInDatabase(_updateContactRequest.Id))">Find Contact</MudButton>
                <div style="display:flex">
                    <MudButton Variant="Variant.Filled" Disabled="@(!_existingId)" Color="Color.Surface" DropShadow="false" OnClick="@(() => _form.Validate())">Validate</MudButton>
                    <div style="margin-left: 1rem;" />
                    <MudButton Variant="Variant.Filled" Disabled="@(!_isValid)" Color="Color.Primary" DropShadow="false" OnClick="@(() => UpdateContact())">Add</MudButton>
                    <div style="margin-left: 1rem;" />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(() => Back())">Cancel</MudButton>
                </div>    
            </div>
        </MudPaper>
    </MudItem>
</MudStack>



@code
{
    private MudForm _form = new MudForm();
    private UpdateContactRequest _updateContactRequest = new UpdateContactRequest();
    private bool _uniquePhoneNumber;
    private bool _existingId = false;
    private bool _isValid;
    private bool _updateIsSuccesed = false;
    private string[] _errors = { };
    private Uri? _getContactUri;
    private Uri? _updateContactUri;

    private List<UpdateContactRequest> _recentContacts = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string getContactControllerUri = "/api/contacts/getById";
            _getContactUri = new Uri(httpClient.BaseAddress!, getContactControllerUri);

            const string updateContactControllerUri ="/api/contacts/update";
            _updateContactUri = new Uri(httpClient.BaseAddress!, updateContactControllerUri);
        }
    }

    private async Task CheckContactInDatabase(Guid contactId)
    {
        var parameterUrl = $"{_getContactUri}?contactId={contactId}";
        var response = await httpClient.GetAsync(parameterUrl);

        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            _existingId = true;

            try
            {
                var responseContact = await response.Content.ReadAsStringAsync();
                var contact = JsonSerializer.Deserialize<UpdateContactRequest>(responseContact);

                if(contact != null)
                {
                    _updateContactRequest.FirstName = contact!.FirstName;
                    _updateContactRequest.LastName = contact!.LastName;
                    _updateContactRequest.PhoneNumber = contact.PhoneNumber;
                    _updateContactRequest.Email = contact.Email;
                    _updateContactRequest.DateOfBirth = contact.DateOfBirth;
                }
                else
                {
                    throw new ArgumentNullException(nameof(contact), "Fuck!");
                }

            }
            catch
            {
                throw new ArgumentNullException();
            }

            return;
        }

        _existingId = false;
    }

    private async Task Back()
    {
        if (_isValid)
        {
            await _form!.ResetAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/contacts");
        }
    }

    private async Task UpdateContact()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync(_updateContactUri, _updateContactRequest);

            if (response.IsSuccessStatusCode)
            {
                _updateIsSuccesed = true;
            }
            else
            {
                _updateIsSuccesed = false;
            }
        }
        catch
        {
            throw new ArgumentNullException("Update is wrong!");
        }
    }

    private IEnumerable<string> FirstNameVerification(string firstNameFromField)
    {
        if (string.IsNullOrWhiteSpace(firstNameFromField))
        {
            yield return "First Name is required!";
            yield break;
        }
        if (firstNameFromField.Length > 30)
        {
            yield return "First Name must not contain more than 30 letters";
        }
        if (!char.IsUpper(firstNameFromField[0]))
        {
            yield return "First Name must start with a capital letter";
        }
    }

    private IEnumerable<string> LastNameVerification(string lastNameFromField)
    {
        if (string.IsNullOrWhiteSpace(lastNameFromField))
        {
            yield return "Last Name is required!";
            yield break;
        }
        if (lastNameFromField.Length > 30)
        {
            yield return "Last Name must not contain more than 30 letters";
        }
        if (!char.IsUpper(lastNameFromField[0]))
        {
            yield return "Last Name must start with a capital letter";
        }
    }

    private IEnumerable<string> PhoneNumberVerification(string phoneNumberFromField)
    {
        if (string.IsNullOrWhiteSpace(phoneNumberFromField))
        {
            yield return "Phone number is required!";
            yield break;
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(phoneNumberFromField, @"^\d+$"))
        {
            yield return "Phone number must contain only numbers";
            yield break;
        }
        if (phoneNumberFromField.Length > 13)
        {
            yield return "Phone number must not contain more than 13 characters";
        }
        if (_uniquePhoneNumber == false)
        {
            yield return "Phone number must be unique";
        }
    }

    private async Task PhoneNumberDuplicateVerification(string phoneNumberFromField)
    {
        var parameterUrl = $"{_getContactUri}?phoneNumber={phoneNumberFromField}";
        var response = await httpClient.GetAsync(parameterUrl);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            _uniquePhoneNumber = false;

            return;
        }

        _uniquePhoneNumber = true;
    }

    private IEnumerable<string> EmailVerification(string emailFromField)
    {
        if (string.IsNullOrWhiteSpace(emailFromField))
        {
            yield return "Email number is required!";
            yield break;
        }
        if (emailFromField.Length > 256)
        {
            yield return "Email number must not contain more than 256 characters";
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(emailFromField, @"^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"))
        {
            yield return "Email must be in the format: example@gmail.com";
            yield break;
        }
    }
}