@page "/contacts/updateEditContactForm"
@using Notebook.Domain.Requests
@using Notebook.Domain.Responses

@inject HttpClient httpClient

<MudPaper>
    <MudDataGrid Items="@Elements.Take(4)" ReadOnly="false" EditMode="@DataGridEditMode.Cell"
                 Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.OnRowClick">
        <Columns>
            <PropertyColumn Property="x => x.FirstName" Title="Nr" Editable="false" />
            <PropertyColumn Property="x => x.LastName" />
            <PropertyColumn Property="x => x.PhoneNumber" />
            <PropertyColumn Property="x => x.Email" />
        </Columns>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveChangesAsync">Save Changes</MudButton>
</MudPaper>


@code {
    private IEnumerable<GetContactResponse> Elements = new List<GetContactResponse>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    private MudForm? _mudForm;
    private bool _searchAllContacts = false;
    private bool _disabledSearchButton;
    private bool _showTable;
    private Uri? _getAllContactsUri;
    private Uri? _updateContactsUri;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string allContactControllerUri = "/api/contacts/allContacts";
            _getAllContactsUri = new Uri(httpClient.BaseAddress!, allContactControllerUri);

            const string updateContactsControllerUri = "api/contacts/update";
            _updateContactsUri = new Uri(httpClient.BaseAddress!, updateContactsControllerUri);
        }

        await SearchAllContacts();
    }

    private async Task SearchAllContacts()
    {
        const int defaultPageNumber = 1;
        var response = await httpClient.GetAsync($"{_getAllContactsUri}?PageNumber={defaultPageNumber}");

        if (response.IsSuccessStatusCode)
        {
            Elements = await response.Content.ReadFromJsonAsync<List<GetContactResponse>>();

            if (Elements != null && Elements.Any())
            {
                _showTable = true;
            }
        }
        else
        {
            Elements = new List<GetContactResponse>();
        }
    }

    private async Task SaveChangesAsync()
    {
        foreach (var item in Elements)
        {
            var response = await httpClient.PutAsJsonAsync(_updateContactsUri, item);
        }
    }
}