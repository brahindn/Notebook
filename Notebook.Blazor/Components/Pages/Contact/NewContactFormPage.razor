@page "/contacts/addContactForm"

@using Notebook.Domain.Requests
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudStack Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_mudForm" @bind-IsValid="_isValid" Model="@_newContact" @bind-Errors="@_errors">
                <MudTextField Label="First Name" @bind-Value="_newContact.FirstName" For="@(() => _newContact.FirstName)"
                Required="true" RequiredError="First name is required!"
                Validation="@(new Func<string, IEnumerable<string>>(FirstNameVerification))"/>

                <MudTextField Label="Last Name" @bind-Value="_newContact.LastName" For="@(() => _newContact.LastName)"
                Required="true" RequiredError="Last name is required!"
                Validation="@(new Func<string, IEnumerable<string>>(LastNameVerification))"/>

                <MudTextField Label="Phone number" @bind-Value="_newContact.PhoneNumber" For="@(() => _newContact.PhoneNumber)"
                Required="true" RequiredError="Phone number is required!" T="string"
                Validation="@(new Func<string, IEnumerable<string>>(PhoneNumberVerification))"
                Immediate="true" OnBlur="(async() => await PhoneNumberDuplicateVerification(_newContact.PhoneNumber))" />

                <MudTextField Label="Email" @bind-Value="_newContact.Email" For="@(() => _newContact.Email)"
                Validation="@(new Func<string, IEnumerable<string>>(EmailVerification))" T="string"
                Immediate="true" OnBlur="@(async() => await EmailDuplicateVerification(_newContact.Email))"/>

                <MudDatePicker Label="Date of Birth" @bind-Date="_newContact.DateOfBirth" PickerVariant="PickerVariant.Dialog"/>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <div style="display:flex; justify-content: flex-end;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(() => AddContact())">Add</MudButton>
                <div style="margin-left: 1rem;"/>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(() => Back())">Cancel</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudStack>

<MudTable Items="@_recentContacts">
    <ToolBarContent>
        <MudText>Recently added contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Phone number</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Date of Birth</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Phone number">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Data of Birth">@context.DateOfBirth</MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private MudForm? _mudForm;
    private bool _isValid;
    private bool _uniquePhoneNumber;
    private bool _uniqueEmail;
    private string[] _errors = { };
    private CreateContactRequest _newContact = new CreateContactRequest();
    private GetContactRequest _getContact = new GetContactRequest();
    private Uri? _addContactUri;
    private Uri? _getContactUri;

    private List<CreateContactRequest> _recentContacts = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string addContactControllerUri = "/api/contacts/add";
            _addContactUri = new Uri(httpClient.BaseAddress!, addContactControllerUri);

            const string getContactControllerUri = "/api/contacts/getByFields";
            _getContactUri = new Uri(httpClient.BaseAddress!, getContactControllerUri);
        }
    }

    private async Task Back()   
    {
        if (_isValid)
        {
            await _mudForm!.ResetAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/contacts");
        }
    }

    private async Task AddContact()
    {
        await _mudForm!.Validate();

        if(!_isValid)
        {
            return;
        }

        var response = await httpClient.PostAsJsonAsync(_addContactUri, _newContact);

        if (response.IsSuccessStatusCode)
        {
            _recentContacts.Add(_newContact);
            _newContact = new CreateContactRequest();
        }
    }

    private IEnumerable<string> FirstNameVerification(string firstName)
    {
        if (string.IsNullOrWhiteSpace(firstName))
        {
            yield return "First Name is required!";
            yield break;
        }
        if (firstName.Length > 30)
        {
            yield return "First Name must not contain more than 30 letters";
        }
        if (!char.IsUpper(firstName[0]))
        {
            yield return "First Name must start with a capital letter";
        }
    }

    private IEnumerable<string> LastNameVerification(string lastName)
    {
        if (string.IsNullOrWhiteSpace(lastName))
        {
            yield return "Last Name is required!";
            yield break;
        }
        if (lastName.Length > 30)
        {
            yield return "Last Name must not contain more than 30 letters";
        }
        if (!char.IsUpper(lastName[0]))
        {
            yield return "Last Name must start with a capital letter";
        }
    }

    private IEnumerable<string> PhoneNumberVerification(string phoneNumber)
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            yield return "Phone number is required!";
            yield break;
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(phoneNumber, @"^\d+$"))
        {
            yield return "Phone number must contain only numbers";
            yield break;
        }
        if (phoneNumber.Length > 13)
        {
            yield return "Phone number must not contain more than 13 characters";
        }
        if (_uniquePhoneNumber == false)
        {
            yield return "Phone number must be unique";
        }
    }

    private IEnumerable<string> EmailVerification(string emailFromField)
    {
        if (string.IsNullOrWhiteSpace(emailFromField))
        {
            yield return "Email number is required!";
            yield break;
        }
        if (emailFromField.Length > 256)
        {
            yield return "Email number must not contain more than 256 characters";
        }
        if (!System.Text.RegularExpressions.Regex.IsMatch(emailFromField, @"^[A-Za-z0-9._-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"))
        {
            yield return "Email must be in the format: example@gmail.com";
            yield break;
        }
        if(_uniqueEmail == false)
        {
            yield return "Email must be unique";
        }
    }

    private async Task<bool> EmailDuplicateVerification(string email)
    {
        var parameterUrl = $"{_getContactUri}?email={email}";
        var response = await httpClient.GetAsync(parameterUrl);

        if(response.IsSuccessStatusCode)
        {
            _uniqueEmail = false;
            return false;
        }
        else
        {
            _uniqueEmail = true;
            return true;
        }
    }

    private async Task PhoneNumberDuplicateVerification(string phoneNumber)
    {
        var parameterUrl = $"{_getContactUri}?phoneNumber={phoneNumber}";
        var response = await httpClient.GetAsync(parameterUrl);

        if (response.IsSuccessStatusCode)
        {
            _uniquePhoneNumber = false;
        }
        else
        {
            _uniquePhoneNumber = true;
        }
    }
}