@page "/contacts/searchContact"

@using Newtonsoft.Json
@using Notebook.Domain.Entities
@using Notebook.Domain.Requests
@using Notebook.Domain.Responses
@using Notebook.Shared.RequestFeatures

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudPaper Height="400px" Width="100%">
    <MudStack Justify="Justify.FlexStart" Row="true">
        <MudPaper Class="pa-4" Style="width:50%; height:400px">
            <MudStack Row="true">
                <MudSwitch Class="pa-1" @bind-Value="_searchAllContacts">
                    @if (!_searchAllContacts)
                    {
                        _disabledSearchButton = false;
                        <MudText>Switch to searching through fields</MudText>
                    }
                    else
                    {
                        _disabledSearchButton = true;
                        <MudText>Switch to searching all contacts</MudText>
                    }
                </MudSwitch>

                <MudSpacer/>

                <MudButton Disabled="@_disabledSearchButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SearchAllContacts())">Search all</MudButton>

            </MudStack>
        </MudPaper>

        <MudPaper Style="height:400px; width:50%">

            @if (_searchAllContacts)
            {
                <MudStack Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-4 border-solid border-2 mud-border-primary" Style="height:400px;">
                        <MudForm @ref="_mudForm" Model="_getContactRequest">
                            <MudTextField T="string" Label="First Name" @bind-Value="_getContactRequest.FirstName" For="@(()=>_getContactRequest.FirstName)" />
                            <MudTextField T="string" Label="Last Name" @bind-Value="_getContactRequest.LastName" For="@(()=>_getContactRequest.LastName)" />
                            <MudTextField T="string" Label="Phone number" @bind-Value="_getContactRequest.PhoneNumber" For="@(()=>_getContactRequest.PhoneNumber)" />
                            <MudTextField T="string" Label="Email" @bind-Value="_getContactRequest.Email" For="@(()=>_getContactRequest.Email)" />
                        </MudForm>

                        <MudSpacer/>

                        <MudButton Style="mt-4 float: right" Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => SearchContactsThroughFields(_getContactRequest))">Search</MudButton>
                    </MudPaper>
                </MudStack>
            }
        </MudPaper>
    </MudStack>
</MudPaper>



<MudItem Class="mr-4 mt-1">
    @if(_showTable)
    {
        <MudTable Items="@_allContacts">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>First Name</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Phone Number</MudTh>
                <MudTh>Email</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudItem>

@code
{
    private MudForm? _mudForm;
    private bool _searchAllContacts = false;
    private bool _disabledSearchButton;
    private bool _showTable;
    private Uri? _getAllContactsUri;
    private Uri? _getAllContactsFieldsUri;
    private IEnumerable<GetContactResponse>? _allContacts = new List<GetContactResponse>();
    private GetContactRequest _getContactRequest = new GetContactRequest();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string allContactControllerUri = "/api/contacts/allContacts";
            _getAllContactsUri = new Uri(httpClient.BaseAddress!, allContactControllerUri);

            const string getContactControllerUri = "api/contacts/getByFields";
            _getAllContactsFieldsUri = new Uri(httpClient.BaseAddress!, getContactControllerUri);
        }
    }

    private async Task SearchAllContacts()
    {
        const int defaultPageNumber = 1;
        var response = await httpClient.GetAsync($"{_getAllContactsUri}?PageNumber={defaultPageNumber}");

        if (response.IsSuccessStatusCode)
        {
            _allContacts = await response.Content.ReadFromJsonAsync<List<GetContactResponse>>();

            if (_allContacts != null && _allContacts.Any())
            {
                _showTable = true;
            }
        }
        else
        {
            _allContacts = new List<GetContactResponse>();
        }
    }

    private async Task SearchContactsThroughFields(GetContactRequest contactRequest)
    {
        try
        {
            var response = await httpClient.PostAsJsonAsync(_getAllContactsFieldsUri, contactRequest);

            if (response.IsSuccessStatusCode)
            {
                _allContacts = await response.Content.ReadFromJsonAsync<List<GetContactResponse>>();

                if (_allContacts.Any())
                {
                    _showTable = true;
                }
                else
                {
                    _allContacts = new List<GetContactResponse>();
                }
            }
        }
        catch
        {
            throw new ArgumentException();
        }
    }
}