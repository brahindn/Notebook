@page "/contacts/searchContact"

@using Notebook.Domain.Entities
@using Notebook.Domain.Requests
@using Notebook.Shared.RequestFeatures
@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudPaper Height="400px" Width="100%">
        <MudStack Justify="Justify.FlexStart" Row="true">
            <MudPaper Class="pa-4" Style="width:50%; height:400px">
                <MudStack Row="true">
                    <MudSwitch Class="pa-1" @bind-Value="_searchAllContacts">
                            @if (!_searchAllContacts)
                            {
                                _disabledSearchButton = false;
                                <MudText>Switch to searching through fields</MudText>
                            }
                            else
                            {
                                _disabledSearchButton = true;
                                <MudText>Switch to searching all contacts</MudText>
                            }
                    </MudSwitch>

                    <MudSpacer/>

                    <MudButton Disabled="@_disabledSearchButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SearchAllContacts())">SEARCH</MudButton>

                </MudStack>
            </MudPaper>

            <MudPaper Style="height:400px; width:50%">

            @if (_searchAllContacts)
            {
                <MudStack Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-4 border-solid border-2 mud-border-primary" Style="height:400px;">
                        <MudForm @ref="_mudForm" Model="_contactDTO">
                            <MudTextField T="string" Label="First Name" @bind-Value="_contactDTO.FirstName" For="@(()=>_contactDTO.FirstName)"/>
                            <MudTextField T="string" Label="Last Name" @bind-Value="_contactDTO.LastName" For="@(()=>_contactDTO.LastName)"/>
                            <MudTextField T="string" Label="Phone number" @bind-Value="_contactDTO.PhoneNumber" For="@(()=>_contactDTO.PhoneNumber)"/>
                            <MudTextField T="string" Label="Email" @bind-Value="_contactDTO.Email" For="@(()=>_contactDTO.Email)"/>
                        </MudForm>

                        <MudSpacer/>

                        <MudButton Style="mt-4 float: right" Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => SearchContactsThroughFields(_contactDTO))">Search</MudButton>
                    </MudPaper>
                </MudStack>
            }
            </MudPaper>
        </MudStack>
</MudPaper>



    <MudItem Class="mr-4 mt-1">
        

        @if(_showTable)
        {
            <MudTable Items="@_allContacts">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>Phone Number</MudTh>
                    <MudTh>Email</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudItem>

@code
{
    private MudForm? _mudForm;
    private bool _searchAllContacts = false;
    private bool _disabledSearchButton;
    private bool _showTable;
    private Uri? _getAllContactsUri;
    private Uri? _getAllContactsFieldsUri;
    private IEnumerable<ContactForCreateDTO>? _allContacts = new List<ContactForCreateDTO>();
    private ContactForCreateDTO _contactDTO = new ContactForCreateDTO();

    protected override async Task OnInitializedAsync()
    {
        const string allContactControllerUri = "/api/contacts/allContacts";
        const string allContactsFieldsControllerUri = "/api/contacts/contactsThroughFields";
        _getAllContactsUri = new Uri(httpClient.BaseAddress!, allContactControllerUri);
        _getAllContactsFieldsUri = new Uri(httpClient.BaseAddress!, allContactsFieldsControllerUri);
    }

    private async Task SearchAllContacts()
    {
        const int defaultPageNumber = 1;
        var response = await httpClient.GetAsync($"{_getAllContactsUri}?PageNumber={defaultPageNumber}");

        if (response.IsSuccessStatusCode)
        {
            _allContacts = await response.Content.ReadFromJsonAsync<List<ContactForCreateDTO>>();

            if (_allContacts.Any())
            {
                _showTable = true;
            }
        }
        else
        {
            _allContacts = new List<ContactForCreateDTO>();
        }
    }

    private async Task SearchContactsThroughFields(ContactForCreateDTO _contactDTO)
    {
        var response = await httpClient.PostAsJsonAsync(_getAllContactsFieldsUri, _contactDTO);

        if(response.IsSuccessStatusCode)
        {
            _allContacts = await response.Content.ReadFromJsonAsync<List<ContactForCreateDTO>>();

            if(_allContacts.Any())
            {
                _showTable = true;
            }
            else
            {
                _allContacts = new List<ContactForCreateDTO>();
            }
        }
    }
}