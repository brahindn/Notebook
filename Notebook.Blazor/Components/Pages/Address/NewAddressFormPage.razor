@page "/addresses/addAddressForm"
@using Notebook.Domain
@using Notebook.Domain.Requests
@using System.Globalization
@using Notebook.Domain.Responses

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudPopoverProvider/>

<MudStack Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="_isValid" Model="@_newAddress" @bind-Errors="@_errors">

                <MudSelect T="GetContactResponse" Label="Choose contact" @bind-Value="SelectedContact" ToStringFunc="@convertFunc" Placeholder="Please Select">
                    @foreach(var contact in _allContacts)
                    {
                        <MudStack Row="true">
                            <MudSelectItem  Value="@contact">@contact.LastName - @contact.Email</MudSelectItem>
                        </MudStack>
                    }
                </MudSelect>

                <MudRadioGroup T="AddressType" @bind-Value="SelectedAddressType">
                    <MudRadio T="AddressType" Value="AddressType.Business">Business</MudRadio>
                    <MudRadio T="AddressType" Value="AddressType.Personal">Personal</MudRadio>
                </MudRadioGroup>

                <MudTextField Label="Country" @bind-Value="_newAddress.Country" For="@(() => _newAddress.Country)"
                Required="true"
                Validation="@(new Func<string, IEnumerable<string>>(CountryVerification))"/>

                <MudTextField Label="Region" @bind-Value="_newAddress.Region" For="@(() => _newAddress.Region)"
                Required="true"
                Validation="@(new Func<string, IEnumerable<string>>(RegionVerification))" />

                <MudTextField Label="City" @bind-Value="_newAddress.City" For="@(() => _newAddress.City)"
                Required="true"
                Validation="@(new Func<string, IEnumerable<string>>(CityVerification))" />

                <MudTextField Label="Street" @bind-Value="_newAddress.Street" For="@(() => _newAddress.Street)"
                Required="true"
                Validation="@(new Func<string, IEnumerable<string>>(StreetVerification))" />

                <MudTextField Label="Building number" @bind-Value="_newAddress.BuildingNumber" For="@(() => _newAddress.BuildingNumber)"
                Required="true"
                Validation="@(new Func<int?, IEnumerable<string>>(BuildingNumberVerification))" />

            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <div style="display:flex; justify-content: flex-end;">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@AddAddress">Add</MudButton>
                <div style="margin-left: 1rem;" />
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@Back">Cancel</MudButton>
            </div>
        </MudPaper>
    </MudItem>
</MudStack>

<MudTable Items="@_recentAddresses">
    <ToolBarContent>
        <MudText>Recently added contacts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Contact Id</MudTh>
        <MudTh>Address Type</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Region</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Street</MudTh>
        <MudTh>Building number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Contact Id">@context.ContactId</MudTd>
        <MudTd DataLabel="Address Type">@context.AddressType</MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="Street">@context.Street</MudTd>
        <MudTd DataLabel="Building Number">@context.BuildingNumber</MudTd>
    </RowTemplate>
</MudTable>



@code
{
    private MudForm _form = new MudForm();
    private bool _isValid = false;
    private string[] _errors = { };
    private AddressType SelectedAddressType { get; set; }
    private GetContactResponse SelectedContact { get; set; }
    private CreateAddressRequest _newAddress = new CreateAddressRequest();
    private List<CreateAddressRequest> _recentAddresses = new List<CreateAddressRequest>();
    private IEnumerable<GetContactResponse> _allContacts = new List<GetContactResponse>();
    private Func<GetContactResponse, string> convertFunc = c => c?.LastName;
    private Uri? _addAddressUri;
    private Uri? _getAllContactsUri;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string _addAddressControllerUri = "api/addresses/add";
            _addAddressUri = new Uri(httpClient.BaseAddress!, _addAddressControllerUri);

            const string _getAllContactsControllerUri = "api/contacts/allContacts";
            _getAllContactsUri = new Uri(httpClient.BaseAddress!, _getAllContactsControllerUri);
        }

        await SearchAllContacts();
    }

    private async Task AddAddress()
    {
        await _form.Validate();

        if(!_isValid)
        {
            return;
        }

        try
        {
            if(SelectedAddressType == null || SelectedContact.Id == null)
            {
                return;
            }

            _newAddress.AddressType = SelectedAddressType;
            _newAddress.ContactId = SelectedContact.Id;         

            var response = await httpClient.PostAsJsonAsync(_addAddressUri, _newAddress);

            if(response.IsSuccessStatusCode)
            {
                _recentAddresses.Add(_newAddress);
                _newAddress = new CreateAddressRequest();
            }
        }
        catch
        {
            throw new Exception("Something went wrong");
        }
        
    }

    private async Task Back()
    {
        if(_isValid)
        {
            await _form.ResetAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/addresses");
        }
    }

    private IEnumerable<string> CountryVerification(string country)
    {
        if (string.IsNullOrWhiteSpace(country))
        {
            yield return "Country is requred!";
            yield break;
        }
        if (country.Length > 30)
        {
            yield return "Country length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(country[0]))
        {
            yield return "Country must start with a capital letter";
        }
    }

    private IEnumerable<string> RegionVerification(string region)
    {
        if (string.IsNullOrWhiteSpace(region))
        {
            yield return "Region is requred!";
            yield break;
        }
        if (region.Length > 30)
        {
            yield return "Region length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(region[0]))
        {
            yield return "Region must start with a capital letter";
        }
    }

    private IEnumerable<string> CityVerification(string city)
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            yield return "City is requred!";
            yield break;
        }
        if (city.Length > 30)
        {
            yield return "City length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(city[0]))
        {
            yield return "City must start with a capital letter";
            yield break;
        }
    }

    private IEnumerable<string> StreetVerification(string street)
    {
        if (string.IsNullOrWhiteSpace(street))
        {
            yield return "Street is requred!";
            yield break;
        }
        if (street.Length > 50)
        {
            yield return "Street length can't be more than 50!";
            yield break;
        }
        if (!char.IsUpper(street[0]))
        {
            yield return "Street must start with a capital letter";
            yield break;
        }
    }

    private IEnumerable<string> BuildingNumberVerification(int? buildingBumber)
    {
        if (buildingBumber == null)
        {
            yield return "Building number is required";
            yield break;
        }
        if (buildingBumber < 1)
        {
            yield return "Cannot be <1";
            yield break;
        }
    }

    private async Task SearchAllContacts()
    {
        const int defaultPageNumber = 1;
        var response = await httpClient.GetAsync($"{_getAllContactsUri}?PageNumber={defaultPageNumber}");

        if (response.IsSuccessStatusCode)
        {
            _allContacts = await response.Content.ReadFromJsonAsync<List<GetContactResponse>>();
        }
        else
        {
            _allContacts = new List<GetContactResponse>();
        }
    }
}