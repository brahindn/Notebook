@page "/addresses/updateAddressForm"
@using Notebook.Domain
@using Notebook.Domain.Requests
@using System.Globalization
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudStack Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="_isValid" Model="@_updateAddressRequest" @bind-Errors="@_errors">

                <MudTextField Label="Address Id" @bind-Value="_updateAddressRequest.Id" For="@(() => _updateAddressRequest.Id)"
                Required="true" RequiredError="Address Id is required!" 
                Class="@(_existingId ? "green-border" : "")"/>

                <style>.green-border {border: 2px solid green;} </style>

                <MudRadioGroup T="AddressType?" @bind-Value="_updateAddressRequest.AddressType" Disabled="!_existingId">
                    <MudRadio T="AddressType?" Value="AddressType.Business">Business</MudRadio>
                    <MudRadio T="AddressType?" Value="AddressType.Personal">Personal</MudRadio>
                </MudRadioGroup>

                <MudTextField Label="Country" @bind-Value="_updateAddressRequest.Country" For="@(() => _updateAddressRequest.Country)"
                Required="true" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(CountryVerification))"/>

                <MudTextField Label="Region" @bind-Value="_updateAddressRequest.Region" For="@(() => _updateAddressRequest.Region)"
                Required="true" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(RegionVerification))"/>

                <MudTextField Label="City" @bind-Value="_updateAddressRequest.City" For="@(() => _updateAddressRequest.City)"
                Required="true" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(CityVerification))"/>

                <MudTextField Label="Street" @bind-Value="_updateAddressRequest.Street" For="@(() => _updateAddressRequest.Street)"
                Required="true" Disabled="!_existingId"
                Validation="@(new Func<string, IEnumerable<string>>(StreetVerification))"/>

                <MudTextField Label="Building number" @bind-Value="_updateAddressRequest.BuildingNumber" For="@(() => _updateAddressRequest.BuildingNumber)"
                Required="true" Disabled="!_existingId"
                Validation="@(new Func<int?, IEnumerable<string>>(BuildingNumberVerification))"/>

            </MudForm>
        </MudPaper>

        <MudPaper Class="pa-4 mt-4">
            <div style="display:flex; justify-content: space-between;">
                <MudButton Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => CheckAddressInDatabase(_updateAddressRequest.Id))">Find Contact</MudButton>
                <div style="display:flex">
                    <MudButton Variant="Variant.Filled" Disabled="@(!_existingId)" Color="Color.Surface" DropShadow="false" OnClick="@(() => _form!.Validate())">Validate</MudButton>
                    <div style="margin-left: 1rem;" />
                    <MudButton Variant="Variant.Filled" Disabled="@(!_isValid)" Color="Color.Primary" DropShadow="false" OnClick="@(() => UpdateChanges())">Update</MudButton>
                    <div style="margin-left: 1rem;" />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(() => Back())">Cancel</MudButton>
                </div>
            </div>
        </MudPaper>
    </MudItem>
</MudStack>

<MudTable Items="@_recentAddresses">
    <ToolBarContent>
        <MudText>Recently updated addresses</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Address Type</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Region</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Street</MudTh>
        <MudTh>Building number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Address Type">@context.AddressType</MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="Street">@context.Street</MudTd>
        <MudTd DataLabel="Building Number">@context.BuildingNumber</MudTd>
    </RowTemplate>
</MudTable>



@code
{
    private MudForm _form = new MudForm();
    private UpdateAddressRequest _updateAddressRequest = new UpdateAddressRequest();
    private string[] _errors = { };
    private bool _isValid;
    private bool _existingId = false;
    private bool _updateIsSuccessed = false;
    private Uri? _getAddressUri;
    private Uri? _updateAddressUri;
    private List<UpdateAddressRequest> _recentAddresses = new List<UpdateAddressRequest>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string getAddressControllerUri = "/api/addresses/getById";
            _getAddressUri = new Uri(httpClient.BaseAddress!, getAddressControllerUri);

            const string updateAddressControllerUri = "/api/addresses/update";
            _updateAddressUri = new Uri(httpClient.BaseAddress!, updateAddressControllerUri);
        }
    }

    private async Task UpdateChanges()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync(_updateAddressUri, _updateAddressRequest);

            if (response.IsSuccessStatusCode)
            {
                _updateIsSuccessed = true;

                _recentAddresses.Add(_updateAddressRequest);
                _updateAddressRequest = new UpdateAddressRequest();

                _existingId = false;
            }
            else
            {
                _updateIsSuccessed = false;
            }
        }
        catch
        {
            throw new ArgumentNullException("Updating is wrong!");
        }
    }

    private async Task CheckAddressInDatabase(Guid addressId)
    {
        _existingId = false;

        var parameterUrl = $"{_getAddressUri}?addressId={addressId}";
        var response = await httpClient.GetAsync(parameterUrl);

        if(response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            try
            {
                var responseAddress = await response.Content.ReadAsStringAsync();
                var address = JsonSerializer.Deserialize<UpdateAddressRequest>(responseAddress);

                if(address != null)
                {
                    _existingId = true;

                    _updateAddressRequest.AddressType = address.AddressType;
                    _updateAddressRequest.Country = address.Country;
                    _updateAddressRequest.Region = address.Region;
                    _updateAddressRequest.City = address.City;
                    _updateAddressRequest.Street = address.Street;
                    _updateAddressRequest.BuildingNumber = address.BuildingNumber;
                }
            }
            catch
            {
                throw new ArgumentNullException("Something went wrong");
            }
        }
        else
        {
            _updateAddressRequest.AddressType = null;
            _updateAddressRequest.Country = "uknown";
            _updateAddressRequest.Region = "uknown";
            _updateAddressRequest.City = "uknown";
            _updateAddressRequest.Street = "uknown";
            _updateAddressRequest.BuildingNumber = 0;

            _existingId = false;
        }
    }

    private async Task Back()
    {
        if (_isValid)
        {
            await _form.ResetAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/addresses");
        }
    }

    private IEnumerable<string> CountryVerification(string country)
    {
        if (string.IsNullOrWhiteSpace(country))
        {
            yield return "Country is requred!";
            yield break;
        }
        if (country.Length > 30)
        {
            yield return "Country length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(country[0]))
        {
            yield return "Country must start with a capital letter";
        }
    }

    private IEnumerable<string> RegionVerification(string region)
    {
        if (string.IsNullOrWhiteSpace(region))
        {
            yield return "Region is requred!";
            yield break;
        }
        if (region.Length > 30)
        {
            yield return "Region length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(region[0]))
        {
            yield return "Region must start with a capital letter";
        }
    }

    private IEnumerable<string> CityVerification(string city)
    {
        if (string.IsNullOrWhiteSpace(city))
        {
            yield return "City is requred!";
            yield break;
        }
        if (city.Length > 30)
        {
            yield return "City length can't be more than 30!";
            yield break;
        }
        if (!char.IsUpper(city[0]))
        {
            yield return "City must start with a capital letter";
            yield break;
        }
    }

    private IEnumerable<string> StreetVerification(string street)
    {
        if (string.IsNullOrWhiteSpace(street))
        {
            yield return "Street is requred!";
            yield break;
        }
        if (street.Length > 50)
        {
            yield return "Street length can't be more than 50!";
            yield break;
        }
        if (!char.IsUpper(street[0]))
        {
            yield return "Street must start with a capital letter";
            yield break;
        }
    }

    private IEnumerable<string> BuildingNumberVerification(int? buildingBumber)
    {
        if (buildingBumber == null)
        {
            yield return "Building number is required";
            yield break;
        }
        if (buildingBumber < 1)
        {
            yield return "Cannot be <1";
            yield break;
        }
    }

}