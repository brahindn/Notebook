@page "/contacts/deleteAddressForm"

@using Notebook.Domain.Requests
@using Notebook.Domain.Responses
@using Notebook.Shared.RequestFeatures
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudStack Justify="Justify.Center">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="_isValid" Model="@_gotAddress" @bind-Errors="@_errors">

                <MudTextField Label="Address Id" @bind-Value="_gotAddress.Id" For="@(() => _gotAddress.Id)"
                Required="true" RequiredError="Contact Id is required!"
                Class="@(_existingId ? "green-border" : "")" />

                <style>.green-border {border: 2px solid green}</style>

            </MudForm>
        </MudPaper>

        <MudPaper Class="pa-4 mt-4">
            <div style="display:flex; justify-content: space-between;">
                <MudButton Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => CheckAddressInDatabase(_gotAddress.Id))">Find Contact</MudButton>
                <div style="display:flex">
                    <MudButton Variant="Variant.Filled" Disabled="@(!_isValid)" Color="Color.Primary" DropShadow="false" OnClick="@(() => DeleteAddress(_gotAddress.Id))">Delete</MudButton>
                    <div style="margin-left: 1rem;" />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(() => Back())">Cancel</MudButton>
                </div>
            </div>
        </MudPaper>
    </MudItem>
</MudStack>

<MudTable Items="@_deletedAddresses">
    <ToolBarContent>
        <MudText>Recently deleted addresses</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Address Type</MudTh>
        <MudTh>Country</MudTh>
        <MudTh>Region</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Street</MudTh>
        <MudTh>Building number</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Address Type">@context.AddressType</MudTd>
        <MudTd DataLabel="Country">@context.Country</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="Street">@context.Street</MudTd>
        <MudTd DataLabel="Building Number">@context.BuildingNumber</MudTd>
    </RowTemplate>
</MudTable>

@code
{
    private MudForm _form = new MudForm();
    private Guid _addressId;
    private bool _existingId = false;
    private bool _deletingIsSuccesed = false;
    private bool _isValid;
    private string[] _errors = { };
    private Uri? _getAddressUri;
    private Uri? _deleteAddressUri;
    private GetAddressResponse _gotAddress = new GetAddressResponse();
    private List<GetAddressResponse> _deletedAddresses = new List<GetAddressResponse>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string getAddressControllerUri = "/api/addresses/getById";
            _getAddressUri = new Uri(httpClient.BaseAddress!, getAddressControllerUri);

            const string deleteAddressControllerUri = "/api/addresses/delete";
            _deleteAddressUri = new Uri(httpClient!.BaseAddress!, deleteAddressControllerUri);
        }
    }

    private async Task Back()
    {
        if (_isValid)
        {
            await _form!.ResetAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/contacts");
        }
    }

    private async Task CheckAddressInDatabase(Guid addressId)
    {
        _existingId = false;

        var parameterUrl = $"{_getAddressUri}?addressId={addressId}";
        var response = await httpClient.GetAsync(parameterUrl);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            _existingId = true;

            try
            {
                var responseAddress = await response.Content.ReadAsStringAsync();
                var address = JsonSerializer.Deserialize<GetAddressResponse>(responseAddress);

                if (address != null)
                {
                    _gotAddress.Id = address.Id;
                    _gotAddress.Country = address.Country;
                    _gotAddress.Region = address.Region;
                    _gotAddress.City = address.City;
                    _gotAddress.Street = address.Street;
                    _gotAddress.BuildingNumber = address.BuildingNumber;
                }
            }
            catch
            {
                throw new ArgumentNullException("Something went wrong");
            }

            return;
        }

        _existingId = false;
    }

    private async Task DeleteAddress(Guid addressId)
    {
        try
        {
            var deleteUri = $"{_deleteAddressUri}?addressId={addressId}";
            var response = await httpClient.DeleteAsync(deleteUri);

            if(response.IsSuccessStatusCode)
            {
                _deletingIsSuccesed = true;

                _deletedAddresses.Add(_gotAddress);
                _gotAddress = new GetAddressResponse();

            }
            else
            {
                _deletingIsSuccesed = false;
            }
        }
        catch
        {
            throw new ArgumentNullException("Deleting is wrong!");
        }
    }
}