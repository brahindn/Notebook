@page "/addresses/searchAddress"

@using Newtonsoft.Json
@using Notebook.Domain
@using Notebook.Domain.Entities
@using Notebook.Domain.Requests
@using Notebook.Domain.Responses
@using Notebook.Shared.RequestFeatures

@inject NavigationManager NavigationManager
@inject HttpClient httpClient

@rendermode InteractiveServer

<MudPaper Height="400px" Width="100%">
    <MudStack Justify="Justify.FlexStart" Row="true">
        <MudPaper Class="pa-4" Style="width:50%; height:400px">
            <MudStack Row="true">
                <MudSwitch Class="pa-1" @bind-Value="_searchAllAddresses">
                    @if (!_searchAllAddresses)
                    {
                        _disabledSearchButton = false;
                        <MudText>Switch to searching through fields</MudText>
                    }
                    else
                    {
                        _disabledSearchButton = true;
                        <MudText>Switch to searching all addresses</MudText>
                    }
                </MudSwitch>

                <MudSpacer />

                <MudButton Disabled="@_disabledSearchButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SearchAllAddresses())">Search all</MudButton>

            </MudStack>
        </MudPaper>

        <MudPaper Style="height:400px; width:50%">

            @if (_searchAllAddresses)
            {
                <MudStack Justify="Justify.FlexEnd">
                    <MudPaper Class="pa-4 border-solid border-2 mud-border-primary" Style="height:400px;">
                        <MudForm @ref="_form" Model="_getAddressRequest">
                            <MudTextField T="Guid?" Label="Contact Id" @bind-Value="_getAddressRequest.ContactId" For="@(() => _getAddressRequest.ContactId)"/>

                            <MudRadioGroup T="AddressType" @bind-Value="SelectedAddressType">
                                <MudRadio T="AddressType" Value="AddressType.Business">Business</MudRadio>
                                <MudRadio T="AddressType" Value="AddressType.Personal">Personal</MudRadio>
                            </MudRadioGroup>

                            <MudTextField T="string" Label="Country" @bind-Value="_getAddressRequest.Country" For="@(()=>_getAddressRequest.Country)" />
                            <MudTextField T="string" Label="Region" @bind-Value="_getAddressRequest.Region" For="@(()=>_getAddressRequest.Region)" />
                            <MudTextField T="string" Label="City" @bind-Value="_getAddressRequest.City" For="@(()=>_getAddressRequest.City)" />
                            <MudTextField T="string" Label="Street" @bind-Value="_getAddressRequest.Street" For="@(()=>_getAddressRequest.Street)" />
                            <MudTextField T="int?" Label="Building number" @bind-Value="_getAddressRequest.BuildingNumber" For="@(()=>_getAddressRequest.BuildingNumber)" />
                        </MudForm>

                        <MudSpacer />

                        <MudButton Style="mt-4 float: right" Variant="Variant.Filled" Color="Color.Dark" DropShadow="false" OnClick="@(() => SearchAddressesByFields(_getAddressRequest))">Search</MudButton>
                    </MudPaper>
                </MudStack>
            }
        </MudPaper>
    </MudStack>
</MudPaper>



<MudItem Class="mr-4 mt-1">
    @if (_showTable)
    {
        <MudTable Items="@_allAddresses">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Contact Id</MudTh>
                <MudTh>Address Type</MudTh>
                <MudTh>Country</MudTh>
                <MudTh>Region</MudTh>
                <MudTh>City</MudTh>
                <MudTh>Street</MudTh>
                <MudTh>Building Number</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="First Name">@context.ContactId</MudTd>
                <MudTd DataLabel="Last Name">@context.Country</MudTd>
                <MudTd DataLabel="Phone Number">@context.Region</MudTd>
                <MudTd DataLabel="Email">@context.City</MudTd>
                <MudTd DataLabel="Email">@context.Street</MudTd>
                <MudTd DataLabel="Email">@context.BuildingNumber</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudItem>

@code
{
    private MudForm _form = new MudForm();
    private bool _searchAllAddresses = false;
    private bool _disabledSearchButton;
    private bool _showTable;
    private AddressType SelectedAddressType { get; set; }
    private Uri? _getAllAddressesUri;
    private Uri? _getAddressesByFieldsUri;
    private IEnumerable<GetAddressResponse>? _allAddresses = new List<GetAddressResponse>();
    private GetAddressRequest _getAddressRequest = new GetAddressRequest();

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() => InitialUri());

        void InitialUri()
        {
            const string addressesByFieldsControllerUri = "api/addresses/getByFields";
            _getAddressesByFieldsUri = new Uri(httpClient.BaseAddress!, addressesByFieldsControllerUri);

            const string allAddressesControllerUri = "api/addresses/allAddresses";
            _getAllAddressesUri = new Uri(httpClient.BaseAddress!, allAddressesControllerUri);
        }
    }

    private async Task SearchAllAddresses()
    {
        const int defaultPageNumber = 1;
        var response = await httpClient.GetAsync($"{_getAllAddressesUri}?PageNumber={defaultPageNumber}");

        if (response.IsSuccessStatusCode)
        {
            _allAddresses = await response.Content.ReadFromJsonAsync<List<GetAddressResponse>>();

            if (_allAddresses != null && _allAddresses.Any())
            {
                _showTable = true;
            }
        }
        else
        {
            _allAddresses = new List<GetAddressResponse>();
        }
    }

    private async Task SearchAddressesByFields(GetAddressRequest addressRequest)
    {
        addressRequest.Id = null;

        try
        {
            addressRequest.AddressType = SelectedAddressType;
            var response = await httpClient.PostAsJsonAsync(_getAddressesByFieldsUri, addressRequest);

            if (response.IsSuccessStatusCode)
            {
                _allAddresses = await response.Content.ReadFromJsonAsync<List<GetAddressResponse>>();

                if (_allAddresses.Any())
                {
                    _showTable = true;
                }
                else
                {
                    _allAddresses = new List<GetAddressResponse>();
                }
            }
        }
        catch
        {
            throw new ArgumentException();
        }
    }
}